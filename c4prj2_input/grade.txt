Grading at Mon Jan 13 02:03:23 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==455== Memcheck, a memory error detector
==455== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==455== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==455== Command: ./tester hands.txt draw.txt
==455== Parent PID: 454
==455== 
==455== Invalid write of size 8
==455==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==455==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==455==    by 0x401B5F: main (test-input.c:69)
==455==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==455== 
==455== 
==455== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==455==  Access not within mapped region at address 0x0
==455==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==455==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==455==    by 0x401B5F: main (test-input.c:69)
==455==  If you believe this happened as a result of a stack
==455==  overflow in your program's main thread (unlikely but
==455==  possible), you can try to increase the size of the
==455==  main thread stack using the --main-stacksize= flag.
==455==  The main thread stack size used in this run was 8388608.
==455== 
==455== HEAP SUMMARY:
==455==     in use at exit: 680 bytes in 3 blocks
==455==   total heap usage: 4 allocs, 1 frees, 4,776 bytes allocated
==455== 
==455== LEAK SUMMARY:
==455==    definitely lost: 0 bytes in 0 blocks
==455==    indirectly lost: 0 bytes in 0 blocks
==455==      possibly lost: 0 bytes in 0 blocks
==455==    still reachable: 680 bytes in 3 blocks
==455==         suppressed: 0 bytes in 0 blocks
==455== Rerun with --leak-check=full to see details of leaked memory
==455== 
==455== For counts of detected and suppressed errors, rerun with: -v
==455== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==460== Memcheck, a memory error detector
==460== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==460== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==460== Command: ./tester hands.txt draw.txt
==460== Parent PID: 459
==460== 
==460== Invalid write of size 8
==460==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==460==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==460==    by 0x401B5F: main (test-input.c:69)
==460==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==460== 
==460== 
==460== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==460==  Access not within mapped region at address 0x0
==460==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==460==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==460==    by 0x401B5F: main (test-input.c:69)
==460==  If you believe this happened as a result of a stack
==460==  overflow in your program's main thread (unlikely but
==460==  possible), you can try to increase the size of the
==460==  main thread stack using the --main-stacksize= flag.
==460==  The main thread stack size used in this run was 8388608.
==460== 
==460== HEAP SUMMARY:
==460==     in use at exit: 680 bytes in 3 blocks
==460==   total heap usage: 4 allocs, 1 frees, 4,776 bytes allocated
==460== 
==460== LEAK SUMMARY:
==460==    definitely lost: 0 bytes in 0 blocks
==460==    indirectly lost: 0 bytes in 0 blocks
==460==      possibly lost: 0 bytes in 0 blocks
==460==    still reachable: 680 bytes in 3 blocks
==460==         suppressed: 0 bytes in 0 blocks
==460== Rerun with --leak-check=full to see details of leaked memory
==460== 
==460== For counts of detected and suppressed errors, rerun with: -v
==460== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==466== Memcheck, a memory error detector
==466== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==466== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==466== Command: ./tester h.txt d.txt
==466== Parent PID: 465
==466== 
==466== Invalid write of size 8
==466==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==466==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==466==    by 0x401B5F: main (test-input.c:69)
==466==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==466== 
==466== 
==466== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==466==  Access not within mapped region at address 0x0
==466==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==466==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==466==    by 0x401B5F: main (test-input.c:69)
==466==  If you believe this happened as a result of a stack
==466==  overflow in your program's main thread (unlikely but
==466==  possible), you can try to increase the size of the
==466==  main thread stack using the --main-stacksize= flag.
==466==  The main thread stack size used in this run was 8388608.
==466== 
==466== HEAP SUMMARY:
==466==     in use at exit: 680 bytes in 3 blocks
==466==   total heap usage: 4 allocs, 1 frees, 4,776 bytes allocated
==466== 
==466== LEAK SUMMARY:
==466==    definitely lost: 0 bytes in 0 blocks
==466==    indirectly lost: 0 bytes in 0 blocks
==466==      possibly lost: 0 bytes in 0 blocks
==466==    still reachable: 680 bytes in 3 blocks
==466==         suppressed: 0 bytes in 0 blocks
==466== Rerun with --leak-check=full to see details of leaked memory
==466== 
==466== For counts of detected and suppressed errors, rerun with: -v
==466== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==472== Memcheck, a memory error detector
==472== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==472== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==472== Command: ./tester i1 i2
==472== Parent PID: 471
==472== 
==472== Invalid write of size 8
==472==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==472==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==472==    by 0x401B5F: main (test-input.c:69)
==472==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==472== 
==472== 
==472== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==472==  Access not within mapped region at address 0x0
==472==    at 0x400AA3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==472==    by 0x400CD3: read_input (in /graderhome/work/c4prj2_input/tester)
==472==    by 0x401B5F: main (test-input.c:69)
==472==  If you believe this happened as a result of a stack
==472==  overflow in your program's main thread (unlikely but
==472==  possible), you can try to increase the size of the
==472==  main thread stack using the --main-stacksize= flag.
==472==  The main thread stack size used in this run was 8388608.
==472== 
==472== HEAP SUMMARY:
==472==     in use at exit: 680 bytes in 3 blocks
==472==   total heap usage: 4 allocs, 1 frees, 4,776 bytes allocated
==472== 
==472== LEAK SUMMARY:
==472==    definitely lost: 0 bytes in 0 blocks
==472==    indirectly lost: 0 bytes in 0 blocks
==472==      possibly lost: 0 bytes in 0 blocks
==472==    still reachable: 680 bytes in 3 blocks
==472==         suppressed: 0 bytes in 0 blocks
==472== Rerun with --leak-check=full to see details of leaked memory
==472== 
==472== For counts of detected and suppressed errors, rerun with: -v
==472== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F

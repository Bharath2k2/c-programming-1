Grading at Sun Jan 12 02:44:56 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1177== Memcheck, a memory error detector
==1177== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1177== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1177== Command: ./tester hands.txt draw.txt
==1177== Parent PID: 1176
==1177== 
==1177== Invalid read of size 8
==1177==    at 0x4011BB: print_hand (in /graderhome/work/c4prj2_input/tester)
==1177==    by 0x401DAE: main (test-input.c:84)
==1177==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1177== 
==1177== 
==1177== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1177==  Access not within mapped region at address 0x8
==1177==    at 0x4011BB: print_hand (in /graderhome/work/c4prj2_input/tester)
==1177==    by 0x401DAE: main (test-input.c:84)
==1177==  If you believe this happened as a result of a stack
==1177==  overflow in your program's main thread (unlikely but
==1177==  possible), you can try to increase the size of the
==1177==  main thread stack using the --main-stacksize= flag.
==1177==  The main thread stack size used in this run was 8388608.
==1177== 
==1177== HEAP SUMMARY:
==1177==     in use at exit: 88 bytes in 9 blocks
==1177==   total heap usage: 18 allocs, 9 frees, 15,296 bytes allocated
==1177== 
==1177== LEAK SUMMARY:
==1177==    definitely lost: 24 bytes in 2 blocks
==1177==    indirectly lost: 16 bytes in 2 blocks
==1177==      possibly lost: 0 bytes in 0 blocks
==1177==    still reachable: 48 bytes in 5 blocks
==1177==         suppressed: 0 bytes in 0 blocks
==1177== Rerun with --leak-check=full to see details of leaked memory
==1177== 
==1177== For counts of detected and suppressed errors, rerun with: -v
==1177== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1182== Memcheck, a memory error detector
==1182== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1182== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1182== Command: ./tester hands.txt draw.txt
==1182== Parent PID: 1181
==1182== 
==1182== Invalid read of size 8
==1182==    at 0x4011BB: print_hand (in /graderhome/work/c4prj2_input/tester)
==1182==    by 0x401DAE: main (test-input.c:84)
==1182==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1182== 
==1182== 
==1182== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1182==  Access not within mapped region at address 0x8
==1182==    at 0x4011BB: print_hand (in /graderhome/work/c4prj2_input/tester)
==1182==    by 0x401DAE: main (test-input.c:84)
==1182==  If you believe this happened as a result of a stack
==1182==  overflow in your program's main thread (unlikely but
==1182==  possible), you can try to increase the size of the
==1182==  main thread stack using the --main-stacksize= flag.
==1182==  The main thread stack size used in this run was 8388608.
==1182== 
==1182== HEAP SUMMARY:
==1182==     in use at exit: 232 bytes in 21 blocks
==1182==   total heap usage: 39 allocs, 18 frees, 20,216 bytes allocated
==1182== 
==1182== LEAK SUMMARY:
==1182==    definitely lost: 96 bytes in 8 blocks
==1182==    indirectly lost: 64 bytes in 8 blocks
==1182==      possibly lost: 0 bytes in 0 blocks
==1182==    still reachable: 72 bytes in 5 blocks
==1182==         suppressed: 0 bytes in 0 blocks
==1182== Rerun with --leak-check=full to see details of leaked memory
==1182== 
==1182== For counts of detected and suppressed errors, rerun with: -v
==1182== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1188== Memcheck, a memory error detector
==1188== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1188== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1188== Command: ./tester h.txt d.txt
==1188== Parent PID: 1187
==1188== 
==1188== Invalid read of size 8
==1188==    at 0x4011BB: print_hand (in /graderhome/work/c4prj2_input/tester)
==1188==    by 0x401DAE: main (test-input.c:84)
==1188==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1188== 
==1188== 
==1188== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1188==  Access not within mapped region at address 0x8
==1188==    at 0x4011BB: print_hand (in /graderhome/work/c4prj2_input/tester)
==1188==    by 0x401DAE: main (test-input.c:84)
==1188==  If you believe this happened as a result of a stack
==1188==  overflow in your program's main thread (unlikely but
==1188==  possible), you can try to increase the size of the
==1188==  main thread stack using the --main-stacksize= flag.
==1188==  The main thread stack size used in this run was 8388608.
==1188== 
==1188== HEAP SUMMARY:
==1188==     in use at exit: 544 bytes in 42 blocks
==1188==   total heap usage: 75 allocs, 33 frees, 20,768 bytes allocated
==1188== 
==1188== LEAK SUMMARY:
==1188==    definitely lost: 96 bytes in 8 blocks
==1188==    indirectly lost: 64 bytes in 8 blocks
==1188==      possibly lost: 0 bytes in 0 blocks
==1188==    still reachable: 384 bytes in 26 blocks
==1188==         suppressed: 0 bytes in 0 blocks
==1188== Rerun with --leak-check=full to see details of leaked memory
==1188== 
==1188== For counts of detected and suppressed errors, rerun with: -v
==1188== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1194== Memcheck, a memory error detector
==1194== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1194== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1194== Command: ./tester i1 i2
==1194== Parent PID: 1193
==1194== 
==1194== Conditional jump or move depends on uninitialised value(s)
==1194==    at 0x4016A3: assert_card_valid (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x4018D7: card_from_letters (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x400CE6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x400E19: read_input (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x401C93: main (test-input.c:69)
==1194== 
==1194== 
==1194== Process terminating with default action of signal 6 (SIGABRT): dumping core
==1194==    at 0x4E6F428: raise (raise.c:54)
==1194==    by 0x4E71029: abort (abort.c:89)
==1194==    by 0x4E67BD6: __assert_fail_base (assert.c:92)
==1194==    by 0x4E67C81: __assert_fail (assert.c:101)
==1194==    by 0x4016CD: assert_card_valid (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x4018D7: card_from_letters (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x400CE6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x400E19: read_input (in /graderhome/work/c4prj2_input/tester)
==1194==    by 0x401C93: main (test-input.c:69)
==1194== 
==1194== HEAP SUMMARY:
==1194==     in use at exit: 896 bytes in 21 blocks
==1194==   total heap usage: 37 allocs, 16 frees, 11,918 bytes allocated
==1194== 
==1194== LEAK SUMMARY:
==1194==    definitely lost: 96 bytes in 8 blocks
==1194==    indirectly lost: 64 bytes in 8 blocks
==1194==      possibly lost: 0 bytes in 0 blocks
==1194==    still reachable: 736 bytes in 5 blocks
==1194==         suppressed: 0 bytes in 0 blocks
==1194== Rerun with --leak-check=full to see details of leaked memory
==1194== 
==1194== For counts of detected and suppressed errors, rerun with: -v
==1194== Use --track-origins=yes to see where uninitialised values come from
==1194== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
